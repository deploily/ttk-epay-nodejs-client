// src/ttk-epay.js
const axios = require('axios');

class TtkEpay {
  constructor(config = {}) {
    this.baseURL = config.baseURL || 'https://pay.deploily.cloud/api/v1';
    this.client = axios.create({
      baseURL: this.baseURL,
      headers: {
        'Content-Type': 'application/json',
      },
      ...config.axiosConfig,
    });

    // Add interceptors for request and response
    this.client.interceptors.response.use(
      response => response,
      error => {
        console.error(`HTTP error occurred: ${error}`);
        if (error.response) {
          console.error(`Response status code: ${error.response.status}`);
          console.error(`Response body: ${JSON.stringify(error.response.data)}`);
        }
        return Promise.reject(error);
      }
    );
  }

  /**
   * Get a list of invoices
   * @param {number} pageNumber - Page number for pagination
   * @param {number} pageSize - Number of items per page
   * @returns {Promise<Object>} - List of invoices with pagination information
   */
  async getInvoices(pageNumber = 1, pageSize = 10) {
    try {
      const response = await this.client.get('/admin/invoices', {
        params: {
          pageNumber,
          pageSize
        }
      });
      
      // Return only the data part to match test expectations
      return response.data;
    } catch (error) {
      console.error('Error fetching invoices:', error);
      throw error;
    }
  }

  /**
   * Create a new invoice
   * @param {Object} invoiceData - Invoice data object
   * @param {number} invoiceData.amount - Invoice amount
   * @param {string} invoiceData.description - Invoice description
   * @returns {Promise<Object>} - Created invoice data
   */
  async createInvoice(invoiceData) {
    try {
      const response = await this.client.post('/admin/invoices', invoiceData);
      return response.data;
    } catch (error) {
      console.error('Error creating invoice:', error);
      throw error;
    }
  }

  /**
   * Get invoice by order ID
   * @param {string} orderId - Order ID to fetch
   * @returns {Promise<Object>} - Invoice data
   */
  async getInvoiceByOrderId(orderId) {
    try {
      const response = await this.client.get(`/admin/invoices/${orderId}`);
      return response.data;
    } catch (error) {
      console.error(`Error fetching invoice with order ID ${orderId}:`, error);
      throw error;
    }
  }

  /**
   * Cancel an invoice
   * @param {string} orderId - Order ID to cancel
   * @returns {Promise<Object>} - Cancelled invoice data
   */
  async cancelInvoice(orderId) {
    try {
      const response = await this.client.delete(`/admin/invoices/${orderId}`);
      return response.data;
    } catch (error) {
      console.error(`Error cancelling invoice with order ID ${orderId}:`, error);
      throw error;
    }
  }

  /**
   * Get summary statistics
   * @param {string} startDate - Start date (YYYY-MM-DD)
   * @param {string} endDate - End date (YYYY-MM-DD)
   * @returns {Promise<Object>} - Summary statistics
   */
  async getSummaryStats(startDate, endDate) {
    try {
      const response = await this.client.get('/admin/statistics/summary', {
        params: {
          startDate,
          endDate
        }
      });
      return response.data;
    } catch (error) {
      console.error(`Error fetching summary statistics:`, error);
      throw error;
    }
  }

  /**
   * Get daily statistics
   * @param {string} startDate - Start date (YYYY-MM-DD)
   * @param {string} endDate - End date (YYYY-MM-DD)
   * @returns {Promise<Object>} - Daily statistics
   */
  async getDailyStats(startDate, endDate) {
    try {
      const response = await this.client.get('/admin/statistics/daily', {
        params: {
          startDate,
          endDate
        }
      });
      return response.data;
    } catch (error) {
      console.error(`Error fetching daily statistics:`, error);
      throw error;
    }
  }

  /**
   * Get PDF receipt for an invoice
   * @param {string} satimOrderId - SATIM order ID
   * @returns {Promise<Buffer>} - PDF receipt as buffer
   */
  async getPdfReceipt(satimOrderId) {
    try {
      const response = await this.client.get('/epayment/generate-pdf', {
        params: {
          SATIM_ORDER_ID: satimOrderId
        },
        responseType: 'arraybuffer'
      });
      return response.data;
    } catch (error) {
      console.error(`Error fetching PDF receipt for invoice with satim_order_id: ${satimOrderId}:`, error);
      throw error;
    }
  }

  /**
   * Send PDF receipt via email
   * @param {string} satimOrderId - SATIM order ID
   * @param {string} email - Email address to send receipt to
   * @returns {Promise<string>} - Response message
   */
  async sendPdfReceiptMail(satimOrderId, email) {
    try {
      const response = await this.client.get('/epayment/send-mail', {
        params: {
          SATIM_ORDER_ID: satimOrderId,
          EMAIL: email
        }
      });
      return response.data;
    } catch (error) {
      console.error(`Error sending PDF receipt for invoice with satim_order_id: ${satimOrderId} to ${email}:`, error);
      throw error;
    }
  }

  /**
   * Post a new payment
   * @param {Object} paymentData - Payment data
   * @param {number} paymentData.amount - Payment amount
   * @param {string} paymentData.method - Payment method (e.g., 'credit_card')
   * @returns {Promise<Object>} - Payment data
   */
  async postPayment(paymentData) {
    try {
      const response = await this.client.post('/epayment', paymentData);
      return response.data;
    } catch (error) {
      console.error('Error posting payment:', error);
      throw error;
    }
  }

  /**
   * Get payment status
   * @param {string} satimOrderId - SATIM order ID
   * @returns {Promise<Object>} - Payment status
   */
  async getPaymentStatus(satimOrderId) {
    try {
      const response = await this.client.get('/epayment', {
        params: {
          SATIM_ORDER_ID: satimOrderId
        }
      });
      return response.data;
    } catch (error) {
      console.error('Error fetching payment status:', error);
      throw error;
    }
  }
}

module.exports = TtkEpay;